---
# Define grafana-server tasks here

- name: ensure that a grafana tarball exists on the server
  stat:
    path: "{{ grafana_tarball_file_path }}/{{ grafana_tarball_file }}"
  register: grafana_tarball

- name: copy over a grafana tarball if none exist on the server
  synchronize:
    src: "{{ local_package_bundle_directory }}/{{ grafana_tarball_file }}"
    dest: "{{ grafana_tarball_file_path }}"
  when: not grafana_tarball.stat.exists

- name: "ensure that {{ grafana_config_directory }} exists on the server"
  stat:
    path: "{{ grafana_config_directory }}"
  register: grafana_config

- name: unpack grafana tarball if grafana config directory doesn't exist
  unarchive:
    src: "{{ grafana_tarball_file_path }}/{{ grafana_tarball_file }}"
    dest: "{{ grafana_source_directory }}"
    mode: 0755
    remote_src: true
  when: not grafana_config.stat.exists

# ------------ [ configure grafana ] -------------

- name: setup grafana environment
  template:
    src: grafana-server.env.j2
    dest: "{{ grafana_config_directory }}/grafana-server.env"
    owner: grafana
    group: grafana
    mode: 0750

- name: create grafana service file
  template:
    src: grafana-server.service.j2
    dest: "{{ grafana_service_file_directory }}/grafana-server.service"
    owner: grafana
    group: grafana
    mode: 0750

- name: edit grafana ini file
  ini_file:
    path: "{{ grafana_config_directory }}/conf/grafana.ini"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  with_items: "{{ grafana_ini }}"

- name: change ownership of grafana directories
  file:
    path: "{{ grafana_config_directory }}"
    owner: grafana
    group: grafana
    mode: 0750
    recurse: true

- name: enable and start grafana systemd unit
  service:
    daemon_reload: true
    name: grafana-server
    enabled: true
    state: started
